name: Java CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - '**'  # Run on push to any branch
  pull_request:
    branches:
      - '**'  # Run on pull request to any branch

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-tool: ${{ steps.set-build-tool.outputs.build-tool }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect build tool
        id: set-build-tool
        run: |
          if [ -f "pom.xml" ]; then
            echo "build-tool=maven" >> $GITHUB_OUTPUT
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "build-tool=gradle" >> $GITHUB_OUTPUT
          else
            echo "No build tool detected" && exit 1
          fi

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Lint with Checkstyle (Maven)
        continue-on-error: true
        if: needs.setup.outputs.build-tool == 'maven'
        run: |
          mvn checkstyle:check

      - name: Lint with Checkstyle (Gradle)
        continue-on-error: true
        if: needs.setup.outputs.build-tool == 'gradle'
        run: |
          ./gradlew checkstyleMain checkstyleTest

  unit-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run unit tests (Maven)
        if: needs.setup.outputs.build-tool == 'maven'
        run: |
          mvn test

      - name: Run unit tests (Gradle)
        if: needs.setup.outputs.build-tool == 'gradle'
        run: |
          ./gradlew test

  integration-test:
    needs:
      - unit-test
      - setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run integration tests (Maven)
        if: needs.setup.outputs.build-tool == 'maven'
        run: |
          mvn verify -P integration-test

      - name: Run integration tests (Gradle)
        if: needs.setup.outputs.build-tool == 'gradle'
        run: |
          ./gradlew integrationTest

  sonar-analysis:
    needs:
      - unit-test
      - integration-test
      - lint
      - setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Run SonarQube analysis (Maven)
        if: needs.setup.outputs.build-tool == 'maven'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
          -Dsonar.projectKey=amasovic_cicd_a2dfe93e-585b-4553-9c94-86c3024bce80 \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

      - name: Run SonarQube analysis (Gradle)
        if: needs.setup.outputs.build-tool == 'gradle'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonar 
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN



  security-scan:
    if: github.ref == 'refs/heads/main'
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Snyk
        run: |
          curl --compressed https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x ./snyk

      - name: Snyk security scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          ./snyk monitor --all-projects --org=20e9dee4-5f99-42d2-b969-e23183e592fe

  build-docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - unit-test
      - integration-test
      - lint
      - sonar-analysis
      - security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to a Container Registry
        uses: azure/docker-login@v2
        env:
          CR_USERNAME: ${{ secrets.CR_USERNAME || github.actor }}
          CR_PASSWORD: ${{ secrets.CR_PASSWORD || secrets.GITHUB_TOKEN }}
          CR_LOGIN_SERVER: ${{ secrets.CR_LOGIN_SERVER || 'ghcr.io' }}
        with:
          login-server: ${{ env.CR_LOGIN_SERVER }}
          username: ${{ env.CR_USERNAME }}
          password: ${{ env.CR_PASSWORD }}

      - id: vars
        run: |
          echo "sha_short=$(echo ${GITHUB_SHA::0,7})" >> $GITHUB_OUTPUT
          echo "IMAGE_ID=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          TAG_SHA: ${{ steps.vars.outputs.sha_short }}
          IMAGE_ID: ${{ steps.vars.outputs.IMAGE_ID }}
          CR_LOGIN_SERVER: ${{ secrets.CR_LOGIN_SERVER || 'ghcr.io' }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.CR_LOGIN_SERVER }}/${{ env.IMAGE_ID }}:latest
            ${{ env.CR_LOGIN_SERVER }}/${{ env.IMAGE_ID }}:${{ env.TAG_SHA }}